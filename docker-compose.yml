services:
  llm_server:
    container_name: llm_server
    build:
      context: llm_server
      dockerfile: docker/Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./llm_server/config/config.json:/app/llm_server/config/config.json
      - ./llm_server/uploads:/app/uploads
    environment:
      - POSTGREST_BASE_URL=http://postgrest:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
      - ZHIPU_API_KEY=${ZHIPU_API_KEY}
      - LLAMA_API_KEY=${LLAMA_API_KEY}
      - TOGETHER_API_KEY=${TOGETHER_API_KEY}
      - VOLCENGINE_ACCESS_KEY_ID=${VOLCENGINE_ACCESS_KEY_ID}
      - VOLCENGINE_SECRET_ACCESS_KEY=${VOLCENGINE_SECRET_ACCESS_KEY}
      - FEATHERLESS_API_KEY=${FEATHERLESS_API_KEY}
      - POSTGREST_JWT_SECRET=${POSTGREST_JWT_SECRET}
    depends_on:
      - database
    networks:
      - internal_net
    restart: unless-stopped

  database:
    build:
      context: database
      dockerfile: Dockerfile.pgvector
    container_name: postgres
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./database/001_db_schema.sql:/docker-entrypoint-initdb.d/001_db_schema.sql:ro
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - internal_net
    restart: unless-stopped

  postgrest:
    build:
      context: postgrest
      dockerfile: Dockerfile
    container_name: postgrest
    volumes:
      - ./postgrest/postgrest.conf:/etc/postgrest.conf:ro
      - ./postgrest/server.crt:/etc/ssl/server.crt:ro
      - ./postgrest/server.key:/etc/ssl/server.key:ro
    environment:
      - PGRST_DB_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      - PGRST_JWT_SECRET=${POSTGREST_JWT_SECRET}
    ports:
      - "8000:8000"
    depends_on:
      - database
    networks:
      - internal_net
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    networks:
      - internal_net
    depends_on:
      - database
    restart: unless-stopped

  lavalink:
    image: ghcr.io/lavalink-devs/lavalink:4
    container_name: lavalink
    pull_policy: always
    volumes:
      - ./lavalink/application.yml:/opt/Lavalink/application.yml:ro
      - ./lavalink/plugins/:/opt/Lavalink/plugins/
    environment:
      - _JAVA_OPTIONS=-Xmx6G
      - SERVER_PORT=${LAVALINK_PORT}
      - LAVALINK_SERVER_PASSWORD=${LAVALINK_PASSWORD}
    ports:
      - "2333:2333"
    networks:
      - internal_net
    restart: unless-stopped

  bot:
    build:
      context: bot
      dockerfile: docker/Dockerfile
    container_name: bot
    depends_on:
      - database
      - llm_server
      - postgrest
      - prometheus
      - grafana
    networks:
      - internal_net
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - LAVALINK_PASSWORD=${LAVALINK_PASSWORD}
      - LAVALINK_PORT=${LAVALINK_PORT}
      - BOT_TOKEN=${BOT_TOKEN}
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on:
      - database
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=database:5432
      - GF_DATABASE_NAME=${POSTGRES_DB}
      - GF_DATABASE_USER=${POSTGRES_USER}
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana.yml:/etc/grafana/provisioning/datasources/grafana.yml:ro
    ports:
      - "3000:3000"
    networks:
      - internal_net
    restart: unless-stopped

networks:
  internal_net:

volumes:
  db_data:
  grafana_data: